{"version":3,"file":"remark-fetch-code.cjs.production.min.js","sources":["../src/utils/extractTagSection.ts","../src/utils/extractMetadataArguments.ts","../src/index.ts","../src/utils/replaceTabsToSpaces.ts"],"sourcesContent":["import {EOL} from 'os';\n\nexport default function extractTagSection(content: string, codeTag?: string) {\n  if (!codeTag) {\n    return content;\n  }\n\n  const lines = content.split(EOL);\n  const tagFragmentLines = getTagSection(lines, codeTag);\n  const formattedLines = removeNonSpaceOnStart(tagFragmentLines);\n  return formattedLines.join(EOL);\n}\n\nfunction getTagSection(lines: string[], codeTag: string): string[] {\n  let indexOfStartString = 0;\n  let indexOfLastString = lines.length;\n  lines.forEach((line, index) => {\n    if (line.includes(`START ${codeTag}`)) {\n      indexOfStartString = index + 1;\n    }\n\n    if (line.includes(`END ${codeTag}`)) {\n      indexOfLastString = index;\n    }\n  });\n\n  return lines.slice(indexOfStartString, indexOfLastString);\n}\n\nfunction removeNonSpaceOnStart(lines: string[]): string[] {\n  let minimumSpaceCharacters: number | undefined;\n\n  lines.forEach(line => {\n    const spaceMatchOnStringStart = line.match(/^\\s+/);\n\n    if (!line) {\n      return;\n    }\n\n    if (!spaceMatchOnStringStart || !spaceMatchOnStringStart[0]) {\n      minimumSpaceCharacters = 0;\n      return;\n    }\n\n    if (minimumSpaceCharacters === undefined) {\n      minimumSpaceCharacters = spaceMatchOnStringStart[0].length;\n    }\n\n    if (spaceMatchOnStringStart[0].length > 0 && spaceMatchOnStringStart[0].length < minimumSpaceCharacters) {\n      minimumSpaceCharacters = spaceMatchOnStringStart[0].length;\n    }\n  });\n\n  return lines.map(line => line.slice(minimumSpaceCharacters))\n}\n","export default function extractMetadataArguments(\n  meta = ''\n): { url: string | undefined; tag: string | undefined } {\n  const metadataArguments = meta.split(' ');\n  let url: string | undefined;\n  let tag: string | undefined;\n\n  for (const argumentString of metadataArguments) {\n    if (argumentString.startsWith('url=')) {\n      url = argumentString.replace('url=', '');\n    }\n\n    if (argumentString.startsWith('tag=')) {\n      tag = argumentString.replace('tag=', '');\n    }\n  }\n\n  return { url, tag };\n}\n","import fetch from 'node-fetch';\nimport visit from 'unist-util-visit';\nimport { Transformer } from 'unified';\nimport { Node } from 'unist';\nimport urlJoin from 'url-join';\nimport extractTagSection from './utils/extractTagSection';\nimport extractMetadataArguments from './utils/extractMetadataArguments';\nimport replaceTabsToSpaces from './utils/replaceTabsToSpaces';\n\ninterface NodeWithMeta extends Node {\n  meta?: string;\n}\n\ninterface PluginOptions {\n  pathPrefix?: string;\n  replaceTabsToSpaces?: boolean\n}\n\nexport default function remarkFetchCode(options?: PluginOptions): Transformer {\n  return async function transformer(tree): Promise<void> {\n    const codeTypeNodes: NodeWithMeta[] = [];\n    const promises = [];\n\n    visit(tree, 'code', node => codeTypeNodes.push(node));\n\n    for (const node of codeTypeNodes) {\n      if (!node.meta) {\n        promises.push(new Promise((resolve) => resolve(node)));\n        continue;\n      }\n\n      const { url, tag } = extractMetadataArguments(node.meta);\n\n      if (!url) {\n        promises.push(new Promise((resolve) => resolve(node)));\n        continue;\n      }\n\n      const urlWithDomainFromOptions = (options && options.pathPrefix) ?\n        urlJoin(options.pathPrefix, url) :\n        url;\n\n      promises.push(\n        new Promise((resolve, reject) => {\n          fetch(urlWithDomainFromOptions)\n            .then(res => {\n              if (res.status !== 200) {\n                console.log(`Error fetching ${urlWithDomainFromOptions} - status ${res.status}`);\n              }\n              return res.text();\n            })\n            .then(fileContent => {\n              node.value = extractTagSection(fileContent, tag);\n              if (options?.replaceTabsToSpaces) {\n                node.value = replaceTabsToSpaces(node.value as string);\n              }\n              resolve(node);\n            })\n            .catch(err => {\n              console.log(`Error fetching ${urlWithDomainFromOptions}`);\n              reject(err);\n            });\n        })\n      );\n    }\n\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n  };\n}\n","import {EOL} from 'os';\n\nexport default function replaceTabsToSpaces(content: string) {\n  const lines = content.split(EOL);\n\n  return lines\n    .map((line) => line.replace(/\\t/g, '  '))\n    .join(EOL);\n}\n"],"names":["extractTagSection","content","codeTag","lines","minimumSpaceCharacters","forEach","line","spaceMatchOnStringStart","match","undefined","length","map","slice","removeNonSpaceOnStart","indexOfStartString","indexOfLastString","index","includes","getTagSection","split","EOL","join","extractMetadataArguments","meta","metadataArguments","url","tag","argumentString","startsWith","replace","options","async","tree","codeTypeNodes","promises","visit","node","push","Promise","resolve","urlWithDomainFromOptions","pathPrefix","urlJoin","reject","fetch","then","res","status","console","log","text","fileContent","value","replaceTabsToSpaces","catch","err","all"],"mappings":"4PAEwBA,EAAkBC,EAAiBC,UACpDA,EA0BP,SAA+BC,OACzBC,SAEJD,EAAME,QAAQC,UACNC,EAA0BD,EAAKE,MAAM,QAEtCF,IAIAC,GAA4BA,EAAwB,SAK1BE,IAA3BL,IACFA,EAAyBG,EAAwB,GAAGG,QAGlDH,EAAwB,GAAGG,OAAS,GAAKH,EAAwB,GAAGG,OAASN,IAC/EA,EAAyBG,EAAwB,GAAGG,SATpDN,EAAyB,KAatBD,EAAMQ,IAAIL,GAAQA,EAAKM,MAAMR,IA5CbS,CAIzB,SAAuBV,EAAiBD,OAClCY,EAAqB,EACrBC,EAAoBZ,EAAMO,cAC9BP,EAAME,QAAQ,CAACC,EAAMU,KACfV,EAAKW,kBAAkBf,KACzBY,EAAqBE,EAAQ,GAG3BV,EAAKW,gBAAgBf,KACvBa,EAAoBC,KAIjBb,EAAMS,MAAME,EAAoBC,GAlBdG,CADXjB,EAAQkB,MAAMC,OACkBlB,IAExBmB,KAAKD,OANlBnB,WCJaqB,EACtBC,EAAO,UAEDC,EAAoBD,EAAKJ,MAAM,SACjCM,EACAC,MAEC,MAAMC,KAAkBH,EACvBG,EAAeC,WAAW,UAC5BH,EAAME,EAAeE,QAAQ,OAAQ,KAGnCF,EAAeC,WAAW,UAC5BF,EAAMC,EAAeE,QAAQ,OAAQ,WAIlC,CAAEJ,IAAAA,EAAKC,IAAAA,4BCCwBI,UAC/BC,eAA2BC,SAC1BC,EAAgC,GAChCC,EAAW,GAEjBC,EAAMH,EAAM,OAAQI,GAAQH,EAAcI,KAAKD,QAE1C,MAAMA,KAAQH,EAAe,KAC3BG,EAAKb,KAAM,CACdW,EAASG,KAAK,IAAIC,QAASC,GAAYA,EAAQH,oBAI3CX,IAAEA,EAAFC,IAAOA,GAAQJ,EAAyBc,EAAKb,UAE9CE,EAAK,CACRS,EAASG,KAAK,IAAIC,QAASC,GAAYA,EAAQH,oBAI3CI,EAA4BV,GAAWA,EAAQW,WACnDC,EAAQZ,EAAQW,WAAYhB,GAC5BA,EAEFS,EAASG,KACP,IAAIC,QAAQ,CAACC,EAASI,KACpBC,EAAMJ,GACHK,KAAKC,IACe,MAAfA,EAAIC,QACNC,QAAQC,sBAAsBT,cAAqCM,EAAIC,UAElED,EAAII,SAEZL,KAAKM,IACJf,EAAKgB,MAAQpD,EAAkBmD,EAAazB,SACxCI,GAAAA,EAASuB,sBACXjB,EAAKgB,MAA4BhB,EAAKgB,MCnD9BjC,MAAMC,OAGzBT,IAAKL,GAASA,EAAKuB,QAAQ,MAAO,OAClCR,KAAKD,QDiDImB,EAAQH,KAETkB,MAAMC,IACLP,QAAQC,sBAAsBT,GAC9BG,EAAOY,QAMbrB,EAASxB,cACL4B,QAAQkB,IAAItB"}