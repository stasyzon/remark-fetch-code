{"version":3,"file":"remark-fetch-code.esm.js","sources":["../src/utils/extractTagSection.ts","../src/utils/extractMetadataArguments.ts","../src/utils/replaceTabsToSpaces.ts","../src/index.ts"],"sourcesContent":["import {EOL} from 'os';\n\nexport default function extractTagSection(content: string, codeTag?: string) {\n  if (!codeTag) {\n    return content;\n  }\n\n  const lines = content.split(EOL);\n  const tagFragmentLines = getTagSection(lines, codeTag);\n  const formattedLines = removeNonSpaceOnStart(tagFragmentLines);\n  return formattedLines.join(EOL);\n}\n\nfunction getTagSection(lines: string[], codeTag: string): string[] {\n  let indexOfStartString = 0;\n  let indexOfLastString = lines.length;\n  lines.forEach((line, index) => {\n    if (line.includes(`START ${codeTag}`)) {\n      indexOfStartString = index + 1;\n    }\n\n    if (line.includes(`END ${codeTag}`)) {\n      indexOfLastString = index;\n    }\n  });\n\n  return lines.slice(indexOfStartString, indexOfLastString);\n}\n\nfunction removeNonSpaceOnStart(lines: string[]): string[] {\n  let minimumSpaceCharacters: number | undefined;\n\n  lines.forEach(line => {\n    const spaceMatchOnStringStart = line.match(/^\\s+/);\n\n    if (!line) {\n      return;\n    }\n\n    if (!spaceMatchOnStringStart || !spaceMatchOnStringStart[0]) {\n      minimumSpaceCharacters = 0;\n      return;\n    }\n\n    if (minimumSpaceCharacters === undefined) {\n      minimumSpaceCharacters = spaceMatchOnStringStart[0].length;\n    }\n\n    if (spaceMatchOnStringStart[0].length > 0 && spaceMatchOnStringStart[0].length < minimumSpaceCharacters) {\n      minimumSpaceCharacters = spaceMatchOnStringStart[0].length;\n    }\n  });\n\n  return lines.map(line => line.slice(minimumSpaceCharacters))\n}\n","export default function extractMetadataArguments(\n  meta = ''\n): { url: string | undefined; tag: string | undefined } {\n  const metadataArguments = meta.split(' ');\n  let url: string | undefined;\n  let tag: string | undefined;\n\n  for (const argumentString of metadataArguments) {\n    if (argumentString.startsWith('url=')) {\n      url = argumentString.replace('url=', '');\n    }\n\n    if (argumentString.startsWith('tag=')) {\n      tag = argumentString.replace('tag=', '');\n    }\n  }\n\n  return { url, tag };\n}\n","import {EOL} from 'os';\n\nexport default function replaceTabsToSpaces(content: string) {\n  const lines = content.split(EOL);\n\n  return lines\n    .map((line) => line.replace(/\\t/g, '  '))\n    .join(EOL);\n}\n","import fetch from 'node-fetch';\nimport visit from 'unist-util-visit';\nimport { Transformer } from 'unified';\nimport { Node } from 'unist';\nimport urlJoin from 'url-join';\nimport extractTagSection from './utils/extractTagSection';\nimport extractMetadataArguments from './utils/extractMetadataArguments';\nimport replaceTabsToSpaces from './utils/replaceTabsToSpaces';\n\ninterface NodeWithMeta extends Node {\n  meta?: string;\n}\n\ninterface PluginOptions {\n  pathPrefix?: string;\n  replaceTabsToSpaces?: boolean\n}\n\nexport default function remarkFetchCode(options?: PluginOptions): Transformer {\n  return async function transformer(tree): Promise<void> {\n    const codeTypeNodes: NodeWithMeta[] = [];\n    const promises = [];\n\n    visit(tree, 'code', node => codeTypeNodes.push(node));\n\n    for (const node of codeTypeNodes) {\n      if (!node.meta) {\n        promises.push(new Promise((resolve) => resolve(node)));\n        continue;\n      }\n\n      const { url, tag } = extractMetadataArguments(node.meta);\n\n      if (!url) {\n        promises.push(new Promise((resolve) => resolve(node)));\n        continue;\n      }\n\n      const urlWithDomainFromOptions = (options && options.pathPrefix) ?\n        urlJoin(options.pathPrefix, url) :\n        url;\n\n      promises.push(\n        new Promise((resolve, reject) => {\n          fetch(urlWithDomainFromOptions)\n            .then(res => {\n              if (res.status !== 200) {\n                console.log(`Error fetching ${urlWithDomainFromOptions} - status ${res.status}`);\n              }\n              return res.text();\n            })\n            .then(fileContent => {\n              node.value = extractTagSection(fileContent, tag);\n              if (options?.replaceTabsToSpaces) {\n                node.value = replaceTabsToSpaces(node.value as string);\n              }\n              resolve(node);\n            })\n            .catch(err => {\n              console.log(`Error fetching ${urlWithDomainFromOptions}`);\n              reject(err);\n            });\n        })\n      );\n    }\n\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n  };\n}\n"],"names":["extractTagSection","content","codeTag","lines","split","EOL","tagFragmentLines","getTagSection","formattedLines","removeNonSpaceOnStart","join","indexOfStartString","indexOfLastString","length","forEach","line","index","includes","slice","minimumSpaceCharacters","spaceMatchOnStringStart","match","undefined","map","extractMetadataArguments","meta","metadataArguments","url","tag","argumentString","startsWith","replace","replaceTabsToSpaces","remarkFetchCode","options","transformer","tree","codeTypeNodes","promises","visit","node","push","Promise","resolve","urlWithDomainFromOptions","pathPrefix","urlJoin","reject","fetch","then","res","status","console","log","text","fileContent","value","catch","err","all"],"mappings":";;;;;SAEwBA,kBAAkBC,SAAiBC;AACzD,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOD,OAAP;AACD;;AAED,QAAME,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAcC,GAAd,CAAd;AACA,QAAMC,gBAAgB,GAAGC,aAAa,CAACJ,KAAD,EAAQD,OAAR,CAAtC;AACA,QAAMM,cAAc,GAAGC,qBAAqB,CAACH,gBAAD,CAA5C;AACA,SAAOE,cAAc,CAACE,IAAf,CAAoBL,GAApB,CAAP;AACD;;AAED,SAASE,aAAT,CAAuBJ,KAAvB,EAAwCD,OAAxC;AACE,MAAIS,kBAAkB,GAAG,CAAzB;AACA,MAAIC,iBAAiB,GAAGT,KAAK,CAACU,MAA9B;AACAV,EAAAA,KAAK,CAACW,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP;AACZ,QAAID,IAAI,CAACE,QAAL,UAAuBf,SAAvB,CAAJ,EAAuC;AACrCS,MAAAA,kBAAkB,GAAGK,KAAK,GAAG,CAA7B;AACD;;AAED,QAAID,IAAI,CAACE,QAAL,QAAqBf,SAArB,CAAJ,EAAqC;AACnCU,MAAAA,iBAAiB,GAAGI,KAApB;AACD;AACF,GARD;AAUA,SAAOb,KAAK,CAACe,KAAN,CAAYP,kBAAZ,EAAgCC,iBAAhC,CAAP;AACD;;AAED,SAASH,qBAAT,CAA+BN,KAA/B;AACE,MAAIgB,sBAAJ;AAEAhB,EAAAA,KAAK,CAACW,OAAN,CAAcC,IAAI;AAChB,UAAMK,uBAAuB,GAAGL,IAAI,CAACM,KAAL,CAAW,MAAX,CAAhC;;AAEA,QAAI,CAACN,IAAL,EAAW;AACT;AACD;;AAED,QAAI,CAACK,uBAAD,IAA4B,CAACA,uBAAuB,CAAC,CAAD,CAAxD,EAA6D;AAC3DD,MAAAA,sBAAsB,GAAG,CAAzB;AACA;AACD;;AAED,QAAIA,sBAAsB,KAAKG,SAA/B,EAA0C;AACxCH,MAAAA,sBAAsB,GAAGC,uBAAuB,CAAC,CAAD,CAAvB,CAA2BP,MAApD;AACD;;AAED,QAAIO,uBAAuB,CAAC,CAAD,CAAvB,CAA2BP,MAA3B,GAAoC,CAApC,IAAyCO,uBAAuB,CAAC,CAAD,CAAvB,CAA2BP,MAA3B,GAAoCM,sBAAjF,EAAyG;AACvGA,MAAAA,sBAAsB,GAAGC,uBAAuB,CAAC,CAAD,CAAvB,CAA2BP,MAApD;AACD;AACF,GAnBD;AAqBA,SAAOV,KAAK,CAACoB,GAAN,CAAUR,IAAI,IAAIA,IAAI,CAACG,KAAL,CAAWC,sBAAX,CAAlB,CAAP;AACD;;SCtDuBK,yBACtBC,IAAI,GAAG;AAEP,QAAMC,iBAAiB,GAAGD,IAAI,CAACrB,KAAL,CAAW,GAAX,CAA1B;AACA,MAAIuB,GAAJ;AACA,MAAIC,GAAJ;;AAEA,OAAK,MAAMC,cAAX,IAA6BH,iBAA7B,EAAgD;AAC9C,QAAIG,cAAc,CAACC,UAAf,CAA0B,MAA1B,CAAJ,EAAuC;AACrCH,MAAAA,GAAG,GAAGE,cAAc,CAACE,OAAf,CAAuB,MAAvB,EAA+B,EAA/B,CAAN;AACD;;AAED,QAAIF,cAAc,CAACC,UAAf,CAA0B,MAA1B,CAAJ,EAAuC;AACrCF,MAAAA,GAAG,GAAGC,cAAc,CAACE,OAAf,CAAuB,MAAvB,EAA+B,EAA/B,CAAN;AACD;AACF;;AAED,SAAO;AAAEJ,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAP;AACD;;SChBuBI,oBAAoB/B;AAC1C,QAAME,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAcC,GAAd,CAAd;AAEA,SAAOF,KAAK,CACToB,GADI,CACCR,IAAD,IAAUA,IAAI,CAACgB,OAAL,CAAa,KAAb,EAAoB,IAApB,CADV,EAEJrB,IAFI,CAECL,GAFD,CAAP;AAGD;;SCUuB4B,gBAAgBC;AACtC,SAAO,eAAeC,WAAf,CAA2BC,IAA3B;AACL,UAAMC,aAAa,GAAmB,EAAtC;AACA,UAAMC,QAAQ,GAAG,EAAjB;AAEAC,IAAAA,KAAK,CAACH,IAAD,EAAO,MAAP,EAAeI,IAAI,IAAIH,aAAa,CAACI,IAAd,CAAmBD,IAAnB,CAAvB,CAAL;;AAEA,SAAK,MAAMA,IAAX,IAAmBH,aAAnB,EAAkC;AAChC,UAAI,CAACG,IAAI,CAACf,IAAV,EAAgB;AACda,QAAAA,QAAQ,CAACG,IAAT,CAAc,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,CAACH,IAAD,CAAhC,CAAd;AACA;AACD;;AAED,YAAM;AAAEb,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAeJ,wBAAwB,CAACgB,IAAI,CAACf,IAAN,CAA7C;;AAEA,UAAI,CAACE,GAAL,EAAU;AACRW,QAAAA,QAAQ,CAACG,IAAT,CAAc,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,CAACH,IAAD,CAAhC,CAAd;AACA;AACD;;AAED,YAAMI,wBAAwB,GAAIV,OAAO,IAAIA,OAAO,CAACW,UAApB,GAC/BC,OAAO,CAACZ,OAAO,CAACW,UAAT,EAAqBlB,GAArB,CADwB,GAE/BA,GAFF;AAIAW,MAAAA,QAAQ,CAACG,IAAT,CACE,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUI,MAAV;AACVC,QAAAA,KAAK,CAACJ,wBAAD,CAAL,CACGK,IADH,CACQC,GAAG;AACP,cAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBC,YAAAA,OAAO,CAACC,GAAR,mBAA8BT,qCAAqCM,GAAG,CAACC,QAAvE;AACD;;AACD,iBAAOD,GAAG,CAACI,IAAJ,EAAP;AACD,SANH,EAOGL,IAPH,CAOQM,WAAW;AACff,UAAAA,IAAI,CAACgB,KAAL,GAAaxD,iBAAiB,CAACuD,WAAD,EAAc3B,GAAd,CAA9B;;AACA,cAAIM,OAAJ,YAAIA,OAAO,CAAEF,mBAAb,EAAkC;AAChCQ,YAAAA,IAAI,CAACgB,KAAL,GAAaxB,mBAAmB,CAACQ,IAAI,CAACgB,KAAN,CAAhC;AACD;;AACDb,UAAAA,OAAO,CAACH,IAAD,CAAP;AACD,SAbH,EAcGiB,KAdH,CAcSC,GAAG;AACRN,UAAAA,OAAO,CAACC,GAAR,mBAA8BT,0BAA9B;AACAG,UAAAA,MAAM,CAACW,GAAD,CAAN;AACD,SAjBH;AAkBD,OAnBD,CADF;AAsBD;;AAED,QAAIpB,QAAQ,CAACzB,MAAb,EAAqB;AACnB,YAAM6B,OAAO,CAACiB,GAAR,CAAYrB,QAAZ,CAAN;AACD;AACF,GAlDD;AAmDD;;;;"}